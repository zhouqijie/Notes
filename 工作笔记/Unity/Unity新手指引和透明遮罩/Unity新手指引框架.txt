# 一、使用完全遮罩和按钮的新手指引框架

可用于主菜单按钮。

示例：
```CSharp
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using UnityEngine.UI;
using UnityEngine.EventSystems;
using UnityEngine.Events;

class MenuGuideInfo
{
    public int id;

    public System.Func<bool> whenToOpen;

    public System.Action openCallback;
    
    public bool tapAnyPlaceToClose;
    public RectTransform focus;

    public System.Action closeCallback;

    public string txt;

    public float duration;

    //自定义回调
    public System.Action btnCustomOnClick = null;

    //图标和文本位置
    public Vector2 pos;
}

public class MenuGuider : MonoBehaviour
{
    private static MenuGuider inst;

    private int currentId;

    private static int[] isGuided = new int[10];//!!!!!!!!!!!!Link To Infomanager.Userdate

    private List<MenuGuideInfo> guides;



    //temp
    private float timer = 0f;


    //pointers
    private MainMenuCanvas menuCanvas;

    private GameObject mask;
    private GameObject obtn;
    private Transform t2Follow;

    private void Awake()
    {
        Debug.Log("Awake");

        isGuided = InfoManager.GetInstance().userData.guideProgress;

        inst = this;

        inst.menuCanvas = MonoBehaviour.FindObjectOfType<MainMenuCanvas>();
        inst.mask = this.transform.Find("GUIDEMASK").gameObject;
        inst.obtn = inst.mask.GetComponentInChildren<Button>().gameObject;

        //guides init
        guides = new List<MenuGuideInfo>();

        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 0;
            guide.txt = "点击这里进入教程";
            guide.whenToOpen = () => { return true; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowMain").Find("AccPanel").Find("LeftPanel").Find("ButtonMatch").GetComponent<RectTransform>();
            guide.btnCustomOnClick = () => { inst.menuCanvas.isAtMainWindow = false; inst.menuCanvas.LoadTutorialLevel(); };
            guide.closeCallback = null;

            guides.Add(guide);
        }

        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 1;
            guide.txt = "已获得默认战舰[阿瑞斯号]";
            guide.whenToOpen = () => { return isGuided[0] == 2 && inst.menuCanvas.isAtMainWindow == true; };//?????????点击第一个指引后就自动启动了 // click to close to false // 2. Delay
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = true;
            guide.focus = null;
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 2;
            guide.txt = "你现在拥有自己的战舰了";
            guide.whenToOpen = () => { return isGuided[1] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = true;
            guide.focus = null;
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 3;
            guide.txt = "现在去用战胜敌人获得的金币升级你的战舰吧";
            guide.whenToOpen = () => { return isGuided[2] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowMain").Find("AccPanel").Find("RightPanel").Find("ButtonShipWindow").GetComponent<RectTransform>();
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 4;
            guide.txt = "点击升级按钮升级当前战舰。";
            guide.whenToOpen = () => { return isGuided[3] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowShips").Find("ShipUpgradePanel").Find("ButtonUpgrade").GetComponent<RectTransform>();
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 5;
            guide.txt = "现在，返回主菜单。";
            guide.whenToOpen = () => { return isGuided[4] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowShips").Find("UpperPanel").Find("ButtonReturn").GetComponent<RectTransform>();
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 6;
            guide.txt = "参加你的第一场实战吧！";
            guide.whenToOpen = () => { return isGuided[5] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowMain").Find("AccPanel").Find("LeftPanel").Find("ButtonMatch").GetComponent<RectTransform>();
            guide.btnCustomOnClick = null;
            guide.closeCallback = () => { menuCanvas.isAtMainWindow = false; };

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 7;
            guide.txt = "哇，你打扫战场的时候发现了一个强力装备！现在去装备它吧！";
            guide.whenToOpen = () => { return isGuided[6] == 2 && inst.menuCanvas.isAtMainWindow == true; };
            guide.openCallback = () => { inst.menuCanvas.GiveNewCom(InfoManager.GetInstance().weaponInfos.Find(w => w.rank == "B")); };
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowMain").Find("AccPanel").Find("RightPanel").Find("ButtonEquipmentWindow").GetComponent<RectTransform>();
            guide.btnCustomOnClick = null;
            guide.closeCallback = null;

            guides.Add(guide);
        }
        //-------------------------------------
        {
            MenuGuideInfo guide = new MenuGuideInfo();
            guide.id = 8;
            guide.txt = "点击这件装备即可装备上！";
            guide.whenToOpen = () => { return isGuided[7] == 2; };
            guide.openCallback = null;
            guide.tapAnyPlaceToClose = false;
            guide.focus = this.transform.Find("Windows").Find("WindowEquipments").Find("EquipmentsPanel").Find("Weapons").GetComponentInChildren<ScrollRect>().content.GetChild(0).Find("Image").GetComponent<RectTransform>();//index??
            guide.btnCustomOnClick = () => { this.transform.Find("Windows").Find("WindowEquipments").Find("EquipmentsPanel").Find("Weapons").GetComponentInChildren<ScrollRect>().content.GetChild(0).GetComponent<Button>().onClick.Invoke(); };
            guide.closeCallback = null;

            guides.Add(guide);
        }
    }

    void Start()
    {
        
    }
    

    void Update()
    {
        //---
        timer -= Time.deltaTime;
        //---



        Guide();//!!!!!!!!!!!!Invoke In Events To Reduce Cost

        //Btn follow
        if (t2Follow != null)
        {
            obtn.transform.position = t2Follow.position;
            obtn.transform.rotation = t2Follow.rotation;
        }
    }




    public static void Guide()
    {
        foreach(var guide in inst.guides)
        {
            int idTmp = guide.id;

            if (guide.whenToOpen() && isGuided[guide.id] == 0)
            {


                //Acivate Guide
                inst.mask.SetActive(true);

                //text
                inst.mask.GetComponentInChildren<Text>().text = "<b>" + guide.txt + "</b>";

                //openCallback
                guide.openCallback?.Invoke();

                //how to close
                if (guide.tapAnyPlaceToClose)
                {
                    inst.obtn.GetComponent<Animation>().enabled = false;

                    inst.obtn.GetComponent<Image>().color = new Color(0f, 0f, 0f, 0f);
                    inst.obtn.GetComponent<Image>().sprite = null;

                    inst.obtn.GetComponent<RectTransform>().anchoredPosition = new Vector2();
                    inst.obtn.GetComponent<RectTransform>().anchorMin = new Vector2();
                    inst.obtn.GetComponent<RectTransform>().anchorMax = new Vector2();
                    inst.obtn.GetComponent<RectTransform>().sizeDelta = new Vector2(5000, 5000);
                    inst.obtn.transform.localScale = Vector3.one;
                    inst.t2Follow = null;
                }
                else
                {
                    inst.obtn.GetComponent<Animation>().enabled = true;

                    inst.obtn.GetComponent<Image>().color = guide.focus.GetComponent<Image>().color;
                    inst.obtn.GetComponent<Image>().sprite = guide.focus.GetComponent<Image>().sprite;

                    inst.obtn.transform.SetParent(null);
                    inst.obtn.GetComponent<RectTransform>().sizeDelta = guide.focus.sizeDelta;
                    inst.obtn.GetComponent<RectTransform>().pivot = guide.focus.pivot;

                    inst.obtn.transform.localScale = guide.focus.lossyScale;
                    inst.obtn.transform.SetParent(inst.mask.transform);
                    inst.t2Follow = guide.focus;
                }

                inst.mask.GetComponentInChildren<Button>().onClick.RemoveAllListeners();
                inst.mask.GetComponentInChildren<Button>().onClick.AddListener(() => {
                    //Invoke Focus Button
                    if(guide.btnCustomOnClick != null)
                    {
                        guide.btnCustomOnClick();
                    }
                    else if(!guide.tapAnyPlaceToClose)
                    {
                        guide.focus.GetComponent<Button>().onClick?.Invoke();
                    }

                    //Hide Mask
                    inst.mask.SetActive(false);
                    isGuided[idTmp] = 2;

                    //callback
                    guide.closeCallback?.Invoke();
                });


                isGuided[guide.id] = 1;
            }
        }
    }




    private void OnGUI()
    {
        string str = "";
        for(int i = 0; i < isGuided.Length; i++)
        {
            str += isGuided[i].ToString() + "\n";
        }

        GUILayout.TextArea(str);
    }
}


```




# 二、使用可透过遮罩的新手指引框架

可用于游戏内操作指引。

示例：
```CSharp
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;
using UnityEngine.EventSystems;



public class GuideInfo
{
    public int id;
    public System.Func<bool> whenToOpen;
    public System.Func<bool> whenToClose;

    public System.Action opencallback;
    public System.Action closecallback;

    public RectTransform target;

    public bool useDefaultImage;

    public int radius;

    public string guideTxt;



    public string fingerAnim; //""-no

    public GuideInfo()
    {
        opencallback = () => { };
        closecallback = () => { };
    }
}


public class InGameGuider : MonoBehaviour
{
    private static InGameGuider inst;


    //guide
    private List<GuideInfo> guideInfos;
    private static int currentGuideId;
    private static int[] isGuided;


    //dest gizmos
    private static Vector3[] destinationPos;
    private static int currentDestIndex;

    //player
    private GameObject player;


    //obj
    private UICanvas uicanvas;
    private GameObject destinationGizmos;

    public GameObject fingerAnim = null;

    //del
    private System.Func<bool> whenToCloseGuide;
    private System.Func<bool> whenToOpenGuide;


    //tmp
    private float timer = 0f;
    







    private void Awake()
    {
        //硬编码
        inst = this;
        isGuided = new int[10] { 0, 0, 0, 0 ,0 ,0 ,0, 0 ,0 ,0 };
        destinationPos = new Vector3[3] { new Vector3(0f, 0f, 100f), new Vector3(0f, 0f, 200f), new Vector3(100f, 0f, 300f) };

        currentGuideId = 0;
        currentDestIndex = 0;
    }

    private void Start()
    {
        player = FindObjectOfType<PlayerController>().gameObject;

        uicanvas = FindObjectOfType<UICanvas>();

        destinationGizmos = Instantiate<GameObject>(Resources.Load<GameObject>("Prefabs/Destination"), new Vector3(99999f, 100f, 99999f), new Quaternion());
        destinationGizmos.SetActive(false);

        guideInfos = new List<GuideInfo>();

        //Guides
        {
            GuideInfo info0 = new GuideInfo();
            info0.id = 0;
            info0.whenToOpen = (() => { return true; });
            info0.whenToClose = () => { return timer < 0f; };
            info0.opencallback = (() => { timer = 2.5f; });
            info0.target = uicanvas.transform.Find("UI_UserControls").Find("MovePanel").Find("Rotator1").GetComponent<RectTransform>();

            info0.useDefaultImage = true;
            info0.radius = 0;

            info0.guideTxt = "你好，指挥官，欢迎来到战场！";

            info0.fingerAnim = "";

            guideInfos.Add(info0);
        }

        //Guides
        {
            GuideInfo info1 = new GuideInfo();
            info1.id = 1;
            info1.whenToOpen = (() => { return isGuided[0] == 2; });
            info1.whenToClose = () => { return inst.player.GetComponent<IShipController>().Throttle > 0.5f; };
            info1.opencallback = (() => { ShowNextDestination(null); });
            info1.target = uicanvas.transform.Find("UI_UserControls").Find("MovePanel").Find("Rotator1").GetComponent<RectTransform>();

            info1.useDefaultImage = true;
            info1.radius = 150;

            info1.guideTxt = "拖动这里移动战舰！";

            info1.fingerAnim = "GuideSlideUp";

            guideInfos.Add(info1);
        }


        //Guides
        {
            GuideInfo info2 = new GuideInfo();
            info2.id = 2;
            info2.whenToOpen = (() => { return (player.transform.position - destinationGizmos.transform.position).sqrMagnitude < Mathf.Pow(100f, 2f) && player.GetComponent<Rigidbody>().velocity.sqrMagnitude > 50f; });//Debug.Log(destinationGizmos.transform.position);  
            info2.whenToClose = () => { return false; };
            info2.opencallback = (() => {
                HideDestination();
                uicanvas.transform.Find("DragPanel").GetComponent<UIDragPanel>().onBeginDrag.AddListener(() => { HideGuideMask(); uicanvas.transform.Find("DragPanel").GetComponent<UIDragPanel>().onBeginDrag.RemoveAllListeners(); });
            });
            info2.target = uicanvas.transform.Find("DragPanel").GetComponent<RectTransform>();

            info2.useDefaultImage = true;
            info2.radius = 250;

            info2.guideTxt = "滑动屏幕移动视角！";

            info2.fingerAnim = "GuideSlideRight";

            guideInfos.Add(info2);
        }

        //Guides
        {
            GuideInfo info3 = new GuideInfo();
            info3.id = 3;
            info3.whenToOpen = (() => { return player.GetComponent<PlayerController>().TargetLock != null && uicanvas.CanFireAll; });
            info3.whenToClose = () => { return player.GetComponent<PlayerController>().PrimaryFiringOrder || player.GetComponent<PlayerController>().SecondaryFiringOrder; };//监听开火事件。
            info3.opencallback = (() => {
                Time.timeScale = 0f;
            });
            info3.closecallback = (() => { timer = 4f; });
            info3.target = uicanvas.transform.Find("UI_UserControls").Find("ButtonFire").GetComponent<RectTransform>();

            info3.useDefaultImage = true;
            info3.radius = 150;

            info3.guideTxt = "按住开火按钮发射炮弹！";

            info3.fingerAnim = "GuidePress";

            guideInfos.Add(info3);
        }


        //Guides
        {
            GuideInfo info4 = new GuideInfo();
            info4.id = 4;
            info4.whenToOpen = (() => { return isGuided[3] == 2 && timer < 0f; });//Debug.Log(destinationGizmos.transform.position);  
            info4.whenToClose = (() => { return player.GetComponent<PlayerController>().WeaponIndex == 1; });
            info4.opencallback = () => {
                FindObjectOfType<AIController>().aiMode = AIMode.Hunt;
            };
            info4.closecallback = () => {
                timer = 6f;
            };
            info4.target = uicanvas.transform.Find("UI_UserControls").Find("ButtonSecondary").GetComponent<RectTransform>();

            info4.useDefaultImage = true;
            info4.radius = 65;

            info4.guideTxt = "主炮装填较慢，此时可以切换到副炮射击。";

            info4.fingerAnim = "";

            guideInfos.Add(info4);
        }

        //Guides
        {
            GuideInfo info5 = new GuideInfo();
            info5.id = 5;
            info5.whenToOpen = (() => { return (isGuided[3] == 2 && isGuided[4] == 2 && timer < 0f && player.GetComponent<Hull>().HPpercent < 0.99f); });//Debug.Log(destinationGizmos.transform.position);  
            info5.whenToClose = (() => { return player.GetComponent<AbilityRepair>().CanUse == false; });
            info5.opencallback = () => {  };
            info5.target = uicanvas.transform.Find("UI_UserControls").Find("ButtonAbility1").GetComponent<RectTransform>();

            info5.useDefaultImage = true;
            info5.radius = 65;

            info5.guideTxt = "哦！我们的战舰受伤了，使用技能来维修战舰！";

            info5.fingerAnim = "GuidePress";

            guideInfos.Add(info5);
        }
        //Guides
        {
            GuideInfo info6 = new GuideInfo();
            info6.id = 6;
            info6.whenToOpen = (() => { return isGuided[5] == 2 && player.GetComponent<PlayerController>().TargetLock != null; });//Debug.Log(destinationGizmos.transform.position);  
            info6.whenToClose = (() => { return player.GetComponent<AbilityMissile>().CD > 0.5f; });
            info6.opencallback = () => {
                player.GetComponentsInChildren<Turret>().ToList().ForEach(t => t.enabled = false);
                player.GetComponent<Hull>().shipPowerMultip = 100f;
                //Time.timeScale = 0f;
            };
            info6.closecallback = () => {
                timer = 1.5f;
                //Time.timeScale = 0f;
            };
            info6.target = uicanvas.transform.Find("UI_UserControls").Find("ButtonAbility2").GetComponent<RectTransform>();

            info6.useDefaultImage = true;
            info6.radius = 65;

            info6.guideTxt = "做的好，现在使用巡航导弹给敌人最后一击！";

            info6.fingerAnim = "GuidePress";

            guideInfos.Add(info6);
        }

        //Guides
        {
            GuideInfo info7 = new GuideInfo();
            info7.id = 7;
            info7.whenToOpen = (() => { return isGuided[6] == 2 && timer < 0f; });//Debug.Log(destinationGizmos.transform.position);  
            info7.whenToClose = (() => { return (uicanvas.isChasingShell || timer < -5f); });
            info7.opencallback = () => {
                player.GetComponentsInChildren<Turret>().ToList().ForEach(t => t.enabled = false);
                player.GetComponent<Hull>().shipPowerMultip = 100f;
                //Time.timeScale = 0f;
            };
            info7.closecallback = () => {
            };
            info7.target = uicanvas.transform.Find("UI_UserControls").Find("ButtonLock").GetComponent<RectTransform>();

            info7.useDefaultImage = true;
            info7.radius = 40;

            info7.guideTxt = "点击这里可以锁定自己发射的炮弹或者导弹！";

            info7.fingerAnim = "GuidePress";

            guideInfos.Add(info7);
        }

        //Guides
        {
            GuideInfo info = new GuideInfo();
            info.id = 8;
            info.whenToOpen = (() => { return FindObjectOfType<AIController>().Enabled == false; });//2 sec after enemy die
            info.whenToClose = (() => { return true; });
            info.opencallback = () => {
                timer = 3f;
            };
            info.target = uicanvas.transform.Find("DragPanel").GetComponent<RectTransform>();

            info.useDefaultImage = true;
            info.radius = 5000;

            info.guideTxt = "已经击沉敌舰";

            info.fingerAnim = "";

            guideInfos.Add(info);
        }

        //Guides
        {
            GuideInfo info = new GuideInfo();
            info.id = 9;
            info.whenToOpen = (() => { return timer < 0f ; });//2 sec after enemy die  FindObjectOfType<AIController>().Enabled == false && (uicanvas.isChasingShell == false)
            info.whenToClose = (() => { return false; });
            info.opencallback = () => {
                Invoke("BackMainScene", 4.5f);
            };
            info.target = uicanvas.transform.Find("DragPanel").GetComponent<RectTransform>();

            info.useDefaultImage = true;
            info.radius = 0;

            info.guideTxt = "恭喜你完成了新手教程！";

            info.fingerAnim = "";

            guideInfos.Add(info);
        }

        //init
        whenToOpenGuide = guideInfos.Find(g => g.id == currentGuideId).whenToOpen;
    }


    private void Update()
    {
        //---
        timer -= Time.deltaTime;

        //---


        inst.whenToOpenGuide();

        if (whenToOpenGuide != null && whenToOpenGuide())
        {
            Guide();
        }


        if (whenToCloseGuide != null && whenToCloseGuide())
        {
            HideGuideMask();
            whenToCloseGuide = (() => { return false; });
        }
        
        
    }

    

    public static void Guide(float delay)
    {
        inst.StartCoroutine(inst.CoGuide(delay));
    }

    private IEnumerator CoGuide(float delay)
    {
        yield return new WaitForSeconds(delay);

        Guide();
    }

    public static void Guide()
    {

        GuideInfo info = inst.guideInfos.Find(g => g.id == currentGuideId);


        inst.SetGuideMask(info.guideTxt, info.target, info.fingerAnim, -1f, info.useDefaultImage, info.radius);

        isGuided[currentGuideId] = 1;

        inst.whenToCloseGuide = info.whenToClose;

        if (info.opencallback != null)
        {
            info.opencallback();
        }
        else
        {
        }


        //++++
        currentGuideId++;//!!!!!!!!!!!!!!

        if (inst.guideInfos.FirstOrDefault(g => g.id == currentGuideId) != null)
        {
            inst.whenToOpenGuide = inst.guideInfos.Find(g => g.id == currentGuideId).whenToOpen;
            
        }
        else
        {
            inst.whenToOpenGuide = () => { return false; };
        }

    }


    /// <summary>
    /// Dest Arrow
    /// </summary>
    /// <param name="callback"></param>
    private static void ShowNextDestination(Action callback)
    {
        if(currentDestIndex < destinationPos.Length)
        {
            inst.destinationGizmos.SetActive(true);
            inst.destinationGizmos.transform.position = destinationPos[currentDestIndex];

            currentDestIndex++;
            //...
        }
    }

    private static void HideDestination()
    {
        inst.destinationGizmos.SetActive(false);
        inst.destinationGizmos.transform.position = new Vector3(99999f, 100f, 99999f);
    }



    /// <summary>
    /// MASK
    /// </summary>
    /// <param name="txt"></param>
    /// <param name="rectt"></param>
    /// <param name="showTime"></param>
    private void SetGuideMask(string txt, RectTransform rectt, string fingerAnim, float showTime = -1f, bool useDefaultImage = false, int radius = 100)
    {
        if (inst.uicanvas.GetComponentInChildren<GuideMask>(true).isShowing)
        {
            HideGuideMask();
        }

        //Set Focus
        inst.uicanvas.GetComponentInChildren<GuideMask>(true).SetTarget(rectt, useDefaultImage, radius);
        inst.uicanvas.GetComponentInChildren<GuideMask>(true).SetText( "<b>" + txt + "</b>");

        //Set Finger Anim
        if(fingerAnim != "")
        {
            inst.fingerAnim = Instantiate(Resources.Load<GameObject>("Prefabs/" + fingerAnim), rectt.transform.position, rectt.transform.rotation, inst.uicanvas.transform);
        }

        if (showTime > 0f)
        {
            Invoke("HideGuideMask", showTime);
        }
    }

    private void HideGuideMask()
    {
        if(currentGuideId - 1 > -1)
        {
            isGuided[currentGuideId - 1] = 2;
            inst.guideInfos.Find(g => g.id == currentGuideId - 1).closecallback();

        }
        inst.uicanvas.GetComponentInChildren<GuideMask>(true).Close();
        

        //anim
        if(fingerAnim != null)
        {
            Destroy(fingerAnim);
            fingerAnim = null;
        }

        //Time
        Time.timeScale = 1f;
    }






    private void BackMainScene()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene("SceneMainMenu");
    }
    private void OnGUI()
    {
        string str = "";
        for(int i = 0; i < isGuided.Length; i++)
        {
            str += isGuided[i].ToString() + ",";
        }
        GUILayout.TextArea(str);
    }
}

```